#!/bin/bash

# --------------------------------------------------
# DESCRIPTION
# --------------------------------------------------
#
# Extracts streams from MKV videos generated by crunchy-cli or crunchyroll-downloader.
# Every audio and subtitles languages will be seperated into their own single files.
# It operates in bulk for files in the operating directory
#
# --------------------------------------------------
# INSTRUCTION
# --------------------------------------------------
#
# Usage: ./crunchyroll-stream-extracter
#
# --------------------------------------------------
#
# Dependencies
# - ffmpeg https://ffmpeg.org
# - ffprobe https://ffmpeg.org
#
# --------------------------------------------------

# Prepare Default Data
declare -A AUDIO_FILENAME=( [ar-ME]=.me-dub [ar-SA]=.sa-dub [de-DE]=.de-dub [en-IN]=.in-dub [en-US]=.dub [es-419]=.419-dub [es-ES]=.es-dub [es-LA]=.la-dub [fr-FR]=.vf [hi-IN]=.hi-dub [it-IT]=.it-dub [ja-JP]='' [pt-BR]=.br-dub [pt-PT]=.pt-dub [ru-RU]=.ru-dub [zh-CN]=.zh-dub )
IS_MOVIE=false
IGNORE_AUDIO=()

shopt -s nullglob
SEASONS_DIR=('Season '*/)
shopt -u nullglob

# FUNCTIONS
# Validate Input
validate(){
    echo ${#SEASONS_DIR[@]}
    if [ ${#SEASONS_DIR[@]} -gt 0 ]; then
        echo "Season directories found"
    else
        local files_in_current_directory=$(find . -maxdepth 1 -type f -name "*.mkv" | wc -l)
        echo "There is no directory starting with 'Season'. Let's check if there are files in the current directory"
        if [ $files_in_current_directory -gt 0 ]; then
            IS_MOVIE=true
            echo 'We found video file in the current directory'
        else
            echo "There is no video to work on"
            exit
        fi
    fi
}

# Probe file
probe(){
    # $1 represents the mkv file
    ffprobe -loglevel quiet -show_entries stream=index,codec_type:stream_tags=language,title "$1" > .csx-entry.txt
}

# Video Extraction with corresponding audio
extract_videos(){
    # $1 represents the mkv file
    local vid_stream_nb=$(grep -e 'codec_type=video' -c .csx-entry.txt)
    local vid_indexes=( $(pcregrep -M 'index=[0-9]\ncodec_type=video' .csx-entry.txt | grep -e 'index' | sed 's/index=\([0-9]\)/\1/') )

    # Read the .csx-entry.txt file into a variable
    local csx_entry=$(cat .csx-entry.txt)

    for i in "${vid_indexes[@]}"; do
        local audio_index
        if [ $i -eq 0 ]; then
            audio_index=$vid_stream_nb
            IGNORE_AUDIO=(${IGNORE_AUDIO[@]} $audio_index)
        else
            local video_title=$(echo "$csx_entry" | pcregrep -M 'index='$i'\ncodec_type=video\nTAG:title=#[0-9]' | grep -e 'title' | sed 's/TAG:title=\(#.*\)/\1/')
            audio_index=$(echo "$csx_entry" | pcregrep -M 'index=[0-9]\ncodec_type=audio\nTAG:language=[a-z]{2}-([A-Z]{2}|[1-9]+)\nTAG:title=[A-Z][a-z]+ (\([A-Za-z ]+\))? \[Video: '$video_title'\]' | grep -m 1 -e 'index' | sed 's/index=\([0-9]\)/\1/')
        fi
        local lang=$(echo "$csx_entry" | pcregrep -M 'index='${audio_index}'\ncodec_type=audio\nTAG:language=[a-z]{2}-([A-Z]{2}|[0-9]{3})' | grep -e 'language' | sed 's/TAG:language=\(.*\)/\1/')
        ffmpeg -i "$1" -map 0:${i} -map 0:${audio_index} -c copy "${1%.mkv}${AUDIO_FILENAME[$lang]}.mp4"
    done
}

# Audio Extraction into single aac files
extract_audios(){
    # $1 represents the mkv file
    local audio_indexes=( $(pcregrep -M 'index=[0-9]\ncodec_type=audio' .csx-entry.txt | grep -e 'index' | grep -vF "${IGNORE_AUDIO[@]}" | sed 's/index=\([0-9]\)/\1/') )

    # Read the .csx-entry.txt file into a variable
    local csx_entry=$(cat .csx-entry.txt)

    for i in "${audio_indexes[@]}"; do
        local lang=$(echo "$csx_entry" | pcregrep -M 'index='${i}'\ncodec_type=audio\nTAG:language=[a-z]{2}-([A-Z]{2}|[0-9]{3})' | grep -e 'language' | sed 's/TAG:language=\(.*\)/\1/')
        ffmpeg -i "$1" -map 0:${i} -c copy "${1%.mkv}${AUDIO_FILENAME[$lang]}.aac"
    done
}

# Extract Subtitles into a single ssa file
extract_subtitles(){
    # $1 represents the mkv file
    local subtitle_indexes=( $(pcregrep -M 'index=[0-9]\ncodec_type=subtitle' .csx-entry.txt | grep -e 'index' | sed 's/index=\([0-9]\)/\1/') )

    # Read the .csx-entry.txt file into a variable
    local csx_entry=$(cat .csx-entry.txt)

    for i in "${subtitle_indexes[@]}"; do
        local sub_lang=$(echo "$csx_entry" | pcregrep -M 'index='$i'\ncodec_type=subtitle\nTAG:language=[a-z]{2}-([A-Z]{2}|[0-9]+)\nTAG:title=[A-Z][a-z]+( \([A-Za-z ]+\))?( \(CC\))?( \[Video: #[0-9]\])?' | grep -e 'language' | sed 's/TAG:language=\(.*\)/\1/')
        local sub_title=$(echo "$csx_entry" | pcregrep -M 'index='$i'\ncodec_type=subtitle\nTAG:language='$sub_lang'\nTAG:title=[A-Z][a-z]+( \([A-Za-z ]+\))?( \(CC\))?( \[Video: #[0-9]\])?' | grep -e 'TAG:title')

        if grep -q "\(CC\)" <<< "$sub_title" ; then
            ffmpeg -i "$1" -map 0:${i} -c copy "${1%.mkv}${AUDIO_FILENAME[$sub_lang]}.${sub_lang}.ass"
        else
            ffmpeg -i "$1" -map 0:${i} -c copy "${1%.mkv}.${sub_lang}.ass"
        fi
    done
}

# Extract Manifest
extract(){
    # Define an empty array to hold the list of files
    local files=()

    # If it's a series, add all the video files from all season directories to the array
    if [ "$IS_MOVIE" = false ]; then
        for dir in "${SEASONS_DIR[@]}"; do
            files+=("$dir"*.mkv)
        done
    else
        # If it's a movie, add all video files in the current directory to the array
        files=(*.mkv)
    fi

    # Now we can handle all files uniformly, irrespective of whether they're part of a series or a movie
    for file in "${files[@]}"; do
        echo "Processing $file"
        IGNORE_AUDIO=()  # Assuming this array needs to be reset for every file
        probe "$file"
        extract_videos "$file"
        extract_audios "$file"
        extract_subtitles "$file"
    done

    # The cleanup part
    rm .csx-entry.txt
}

# Delete MKV files
cleanup(){
    echo "The extraction process is complete."
    read -p "Do you want to delete the original MKV files? [y/N]: " response
    if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]
    then
        if [ "$IS_MOVIE" = false ]; then
            for dir in "${SEASONS_DIR[@]}"; do
                rm "${dir}"*.mkv
            done
        else
            rm *.mkv
        fi
        echo "All MKV files have been deleted."
    else
        echo "The MKV files have been kept."
    fi
}

validate
extract
cleanup